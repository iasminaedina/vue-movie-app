{"remainingRequest":"/Users/iasmina/Desktop/vue-movie-app/node_modules/babel-loader/lib/index.js!/Users/iasmina/Desktop/vue-movie-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/iasmina/Desktop/vue-movie-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/iasmina/Desktop/vue-movie-app/src/components/moviesList/moviesList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/iasmina/Desktop/vue-movie-app/src/components/moviesList/moviesList.vue","mtime":1562846058468},{"path":"/Users/iasmina/Desktop/vue-movie-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iasmina/Desktop/vue-movie-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/iasmina/Desktop/vue-movie-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iasmina/Desktop/vue-movie-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport storage from \"../../storage.js\";\nexport default {\n  props: ['mode', 'category'],\n  //clear search query when reloading route\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    if (from.name == 'search') {\n      eventHub.$emit('setSearchQuery', true);\n    }\n\n    next();\n  },\n  data: function data() {\n    return {\n      movies: [],\n      listTitle: '',\n      results: ''\n    };\n  },\n  computed: {\n    pageTitle: function pageTitle() {\n      return this.listTitle + storage.pageTitlePostfix;\n    },\n    query: function query() {\n      return this.$route.params.query || '';\n    },\n    request: function request() {\n      //check mode and make appropriate request for movie list\n      if (this.mode === 'search') {\n        return \"/search/movie?api_key=\".concat(storage.apiKey, \"&language=en-US&query=\").concat(this.query, \"&page=1\");\n      } else if (this.mode === 'popular') {\n        return \"/movie/\".concat(this.mode, \"?api_key=\").concat(storage.apiKey, \"&language=en-US&page=1\");\n      }\n    }\n  },\n  methods: {\n    openMoviePopup: function openMoviePopup(id, event) {\n      eventHub.$emit('openMoviePopup', id, event);\n    },\n    //get mode and set list to appropriate data\n    fetchCategory: function fetchCategory() {\n      axios.get(this.request).then(function (resp) {\n        var data = resp.data;\n        this.movies = data.results;\n        this.results = this.movies.length;\n        document.title = this.pageTitle;\n      }.bind(this)).catch(function (error) {\n        this.$router.push({\n          name: '404'\n        });\n      }.bind(this));\n    },\n    fetchFavorites: function fetchFavorites() {\n      if (localStorage.getItem('favorites')) {\n        var ids = JSON.parse(localStorage.getItem('favorites'));\n\n        if (ids.length > 0) {\n          this.results = ids.length;\n          var favorites = []; //loop through favorites localStorage ids and get movies\n\n          ids.forEach(function (id, key) {\n            axios.get(\"/movie/\".concat(id, \"?api_key=\").concat(storage.apiKey, \"&language=en-US\")).then(function (resp) {\n              favorites.push(resp.data);\n            });\n          });\n          this.movies = favorites;\n        }\n      }\n    }\n  },\n  watch: {\n    //watch if route params change and fetch correct list\n    query: function query(value) {\n      this.fetchCategory(value);\n    }\n  },\n  created: function created() {\n    //check mode and get title for list\n    if (this.mode === 'search') {\n      this.fetchCategory();\n      this.listTitle = storage.categories['search'];\n      eventHub.$emit('setSearchQuery');\n    } else if (this.mode === 'popular') {\n      this.fetchCategory();\n      this.listTitle = storage.categories[this.mode];\n    } else if (this.mode === 'favorite') {\n      this.listTitle = storage.categories[this.mode];\n      this.fetchFavorites();\n    }\n  }\n};",{"version":3,"sources":["moviesList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"movie-list\">\n    <div class=\"container\">\n      <h1 class=\"title is-3\">{{ listTitle }} ({{ results }})</h1>\n        <div class=\"columns is-multiline is-mobile\">\n          <a\n            v-for=\"movie in movies\"\n            class=\"column is-half-mobile is-one-third-tablet is-one-quarter-desktop\"\n            :href=\"'/movie/' + movie.id\"\n            @click.prevent=\"openMoviePopup(movie.id, true)\"\n          >\n            <img :src=\"'http://image.tmdb.org/t/p/w185' + movie.poster_path\">\n            <p class=\"movie-title\">{{ movie.title }}</p>\n          </a>\n        </div>\n\n        <section v-if=\"!movies.length\" class=\"not-found\">\n          <div class=\"not-found__content\">\n              <h2 class=\"not-found__title\" v-if=\"mode == 'search'\">Nothing Found</h2>\n              <h2 class=\"not-found__title\" v-if=\"mode == 'favorite'\">You haven't added any favorite movies</h2>\n          </div>\n        </section>\n    </div>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios';\n  import storage from '../../storage.js';\n\n  export default {\n    props: ['mode', 'category'],\n    //clear search query when reloading route\n    beforeRouteLeave (to, from, next) {\n      if(from.name == 'search'){\n        eventHub.$emit('setSearchQuery', true);\n      }\n      next();\n    },\n    data(){\n      return {\n        movies: [],\n        listTitle: '',\n        results: '',\n      }\n    },\n    computed: {\n      pageTitle() {\n        return this.listTitle + storage.pageTitlePostfix;\n      },\n      query() {\n        return this.$route.params.query || '';\n      },\n      request() {\n        //check mode and make appropriate request for movie list\n        if (this.mode === 'search') {\n          return `/search/movie?api_key=${storage.apiKey}&language=en-US&query=${this.query}&page=1`;\n        } else if (this.mode === 'popular') {\n          return `/movie/${this.mode}?api_key=${storage.apiKey}&language=en-US&page=1`;\n        }\n      },\n    },\n    methods: {\n      openMoviePopup(id, event){\n        eventHub.$emit('openMoviePopup', id, event);\n      },\n      //get mode and set list to appropriate data\n      fetchCategory(){\n        axios.get(this.request)\n        .then(function(resp){\n          let data = resp.data;\n          this.movies = data.results;\n          this.results = this.movies.length;\n\n          document.title = this.pageTitle;\n        }.bind(this))\n        .catch(function(error) {\n          this.$router.push({ name: '404' });\n        }.bind(this));\n      },\n      fetchFavorites() {\n        if (localStorage.getItem('favorites')) {\n          const ids = JSON.parse(localStorage.getItem('favorites'));\n          if (ids.length > 0) {\n            this.results = ids.length;\n            let favorites = [];\n            //loop through favorites localStorage ids and get movies\n            ids.forEach(function(id, key) {\n              axios.get(`/movie/${id}?api_key=${storage.apiKey}&language=en-US`)\n                .then(function(resp) {\n                  favorites.push(resp.data);\n                });\n            });\n            this.movies = favorites;\n          }\n        }\n      }\n    },\n    watch: {\n      //watch if route params change and fetch correct list\n      query(value){\n        this.fetchCategory(value);\n      },\n    },\n    created () {\n      //check mode and get title for list\n      if (this.mode === 'search'){\n        this.fetchCategory();\n        this.listTitle = storage.categories['search'];\n        eventHub.$emit('setSearchQuery');\n      } else if (this.mode === 'popular') {\n        this.fetchCategory();\n        this.listTitle = storage.categories[this.mode];\n      } else if (this.mode === 'favorite') {\n        this.listTitle = storage.categories[this.mode];\n        this.fetchFavorites();\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .movie-list {\n    padding: 20px;\n    min-height: 900px;\n  }\n  .movie-title {\n    margin: 0;\n    font-size: 12px;\n    letter-spacing: 0.8px;\n    transition: color 0.5s ease;\n  }\n  img {\n    transform: scale(0.97) translateZ(0);\n    transition: opacity 0.5s ease, transform 0.5s ease;\n  }\n  img:hover {\n    transform: scale(1.03);\n    box-shadow: 0 0 10px rgba(#081c24, 0.1);\n    cursor: pointer;\n  }\n  .movie-title:hover {\n    cursor: pointer;\n    color: #081c24;\n  }\n  .not-found__content {\n    text-align: center;\n  }\n</style>"],"sourceRoot":"src/components/moviesList"}]}