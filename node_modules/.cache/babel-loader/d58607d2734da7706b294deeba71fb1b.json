{"remainingRequest":"/Users/iasmina/Desktop/vue/node_modules/babel-loader/lib/index.js!/Users/iasmina/Desktop/vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/iasmina/Desktop/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/iasmina/Desktop/vue/src/views/moviesList/moviesList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/iasmina/Desktop/vue/src/views/moviesList/moviesList.vue","mtime":1562603656202},{"path":"/Users/iasmina/Desktop/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iasmina/Desktop/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/iasmina/Desktop/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iasmina/Desktop/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport storage from \"../../storage.js\";\nexport default {\n  props: ['mode', 'category'],\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    if (from.name == 'search') {\n      eventHub.$emit('setSearchQuery', true);\n    }\n\n    next();\n  },\n  data: function data() {\n    return {\n      movies: [],\n      listTitle: '',\n      pages: '',\n      results: '',\n      currentPage: 1,\n      listLoaded: false\n    };\n  },\n  computed: {\n    pageTitle: function pageTitle() {\n      return this.listTitle + storage.pageTitlePostfix;\n    },\n    query: function query() {\n      return this.$route.params.query || '';\n    },\n    request: function request() {\n      if (this.mode == 'search') {\n        return \"https://api.themoviedb.org/3/search/movie?api_key=\".concat(storage.apiKey, \"&language=en-US&query=\").concat(this.query, \"&page=1\");\n      } else if (this.mode == 'collection') {\n        var category = this.$route.params.category || this.category;\n        return \"https://api.themoviedb.org/3/movie/\".concat(category, \"?api_key=\").concat(storage.apiKey, \"&language=en-US&page=1\");\n      } else if (this.mode == 'favorite') {\n        var ids = JSON.parse(localStorage.getItem('favorites'));\n        var favorites = [];\n        ids.forEach(function (id, key) {\n          axios.get(\"https://api.themoviedb.org/3/movie/\".concat(id, \"?api_key=\").concat(storage.apiKey, \"&language=en-US\")).then(function (resp) {\n            favorites.push(resp.data);\n          });\n        });\n        this.movies = favorites;\n      }\n    },\n    countResults: function countResults() {\n      if (this.results > 1) {\n        return numeral(this.results).format('0,0') + ' results';\n      } else {\n        return numeral(this.results).format('0,0') + ' result';\n      }\n    }\n  },\n  methods: {\n    openMoviePopup: function openMoviePopup(id, event) {\n      eventHub.$emit('openMoviePopup', id, event);\n    },\n    fetchCategory: function fetchCategory() {\n      axios.get(this.request).then(function (resp) {\n        var data = resp.data;\n        this.movies = data.results;\n        this.pages = data.total_pages;\n        this.results = data.total_results;\n        this.listLoaded = true; // Change Page title\n\n        document.title = this.pageTitle;\n      }.bind(this)).catch(function (error) {\n        this.$router.push({\n          name: '404'\n        });\n      }.bind(this));\n    },\n    loadMore: function loadMore() {\n      this.currentPage++;\n      axios.get(this.request).then(function (resp) {\n        var data = resp.data;\n        var newData = this.movies.concat(data.results);\n        this.movies = newData;\n      }.bind(this));\n    }\n  },\n  watch: {\n    query: function query(value) {\n      this.fetchCategory(value);\n    }\n  },\n  created: function created() {\n    if (this.mode == 'search') {\n      this.listTitle = storage.categories['search'];\n      eventHub.$emit('setSearchQuery');\n    } else if (this.mode == 'collection') {\n      var category = this.$route.params.category || this.category;\n      this.listTitle = storage.categories[category];\n    } else if (this.mode == 'favorite') {\n      this.listTitle = storage.categories['favorite'];\n    }\n\n    this.fetchCategory();\n  }\n};",{"version":3,"sources":["moviesList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,OAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA,CAAA,MAAA,EAAA,UAAA,CADA;AAEA,EAAA,gBAFA,4BAEA,EAFA,EAEA,IAFA,EAEA,IAFA,EAEA;AACA,QAAA,IAAA,CAAA,IAAA,IAAA,QAAA,EAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,IAAA;AACA;;AACA,IAAA,IAAA;AACA,GAPA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,EADA;AAEA,MAAA,SAAA,EAAA,EAFA;AAGA,MAAA,KAAA,EAAA,EAHA;AAIA,MAAA,OAAA,EAAA,EAJA;AAKA,MAAA,WAAA,EAAA,CALA;AAMA,MAAA,UAAA,EAAA;AANA,KAAA;AAQA,GAjBA;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,aAAA,KAAA,SAAA,GAAA,OAAA,CAAA,gBAAA;AACA,KAHA;AAIA,IAAA,KAJA,mBAIA;AACA,aAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KAAA,IAAA,EAAA;AACA,KANA;AAOA,IAAA,OAPA,qBAOA;AAEA,UAAA,KAAA,IAAA,IAAA,QAAA,EAAA;AACA,2EAAA,OAAA,CAAA,MAAA,mCAAA,KAAA,KAAA;AACA,OAFA,MAEA,IAAA,KAAA,IAAA,IAAA,YAAA,EAAA;AACA,YAAA,QAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,QAAA,IAAA,KAAA,QAAA;AACA,4DAAA,QAAA,sBAAA,OAAA,CAAA,MAAA;AACA,OAHA,MAGA,IAAA,KAAA,IAAA,IAAA,UAAA,EAAA;AACA,YAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;AACA,YAAA,SAAA,GAAA,EAAA;AAEA,QAAA,GAAA,CAAA,OAAA,CAAA,UAAA,EAAA,EAAA,GAAA,EAAA;AACA,UAAA,KAAA,CAAA,GAAA,8CAAA,EAAA,sBAAA,OAAA,CAAA,MAAA,sBACA,IADA,CACA,UAAA,IAAA,EAAA;AACA,YAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA;AACA,WAHA;AAIA,SALA;AAMA,aAAA,MAAA,GAAA,SAAA;AACA;AAEA,KA3BA;AA4BA,IAAA,YA5BA,0BA4BA;AACA,UAAA,KAAA,OAAA,GAAA,CAAA,EAAA;AACA,eAAA,OAAA,CAAA,KAAA,OAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,UAAA;AACA,OAFA,MAEA;AACA,eAAA,OAAA,CAAA,KAAA,OAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,SAAA;AACA;AACA;AAlCA,GAlBA;AAsDA,EAAA,OAAA,EAAA;AACA,IAAA,cADA,0BACA,EADA,EACA,KADA,EACA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,EAAA,EAAA,KAAA;AACA,KAHA;AAIA,IAAA,aAJA,2BAIA;AACA,MAAA,KAAA,CAAA,GAAA,CAAA,KAAA,OAAA,EACA,IADA,CACA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,IAAA;AACA,aAAA,MAAA,GAAA,IAAA,CAAA,OAAA;AACA,aAAA,KAAA,GAAA,IAAA,CAAA,WAAA;AACA,aAAA,OAAA,GAAA,IAAA,CAAA,aAAA;AACA,aAAA,UAAA,GAAA,IAAA,CALA,CAMA;;AACA,QAAA,QAAA,CAAA,KAAA,GAAA,KAAA,SAAA;AACA,OARA,CAQA,IARA,CAQA,IARA,CADA,EAUA,KAVA,CAUA,UAAA,KAAA,EAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA;AAAA,UAAA,IAAA,EAAA;AAAA,SAAA;AACA,OAFA,CAEA,IAFA,CAEA,IAFA,CAVA;AAaA,KAlBA;AAmBA,IAAA,QAnBA,sBAmBA;AACA,WAAA,WAAA;AACA,MAAA,KAAA,CAAA,GAAA,CAAA,KAAA,OAAA,EACA,IADA,CACA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,IAAA;AACA,YAAA,OAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,aAAA,MAAA,GAAA,OAAA;AACA,OAJA,CAIA,IAJA,CAIA,IAJA,CADA;AAMA;AA3BA,GAtDA;AAmFA,EAAA,KAAA,EAAA;AACA,IAAA,KADA,iBACA,KADA,EACA;AACA,WAAA,aAAA,CAAA,KAAA;AACA;AAHA,GAnFA;AAwFA,EAAA,OAxFA,qBAwFA;AACA,QAAA,KAAA,IAAA,IAAA,QAAA,EAAA;AACA,WAAA,SAAA,GAAA,OAAA,CAAA,UAAA,CAAA,QAAA,CAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,gBAAA;AACA,KAHA,MAGA,IAAA,KAAA,IAAA,IAAA,YAAA,EAAA;AACA,UAAA,QAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,QAAA,IAAA,KAAA,QAAA;AACA,WAAA,SAAA,GAAA,OAAA,CAAA,UAAA,CAAA,QAAA,CAAA;AACA,KAHA,MAGA,IAAA,KAAA,IAAA,IAAA,UAAA,EAAA;AACA,WAAA,SAAA,GAAA,OAAA,CAAA,UAAA,CAAA,UAAA,CAAA;AACA;;AACA,SAAA,aAAA;AACA;AAnGA,CAAA","sourcesContent":["<template>\n  <div id=\"movie-list\">\n      <div class=\"container\">\n        <h1 class=\"title is-1\">{{listTitle}}</h1>\n          <div class=\"columns is-multiline\">\n            <a v-for=\"movie in movies\" class=\"column is-3\" :href=\"'/movie/' + movie.id\" @click.prevent=\"openMoviePopup(movie.id, true)\">\n              <img :src=\"'http://image.tmdb.org/t/p/w185' + movie.poster_path\">\n              <p class=\"movie-title\">{{ movie.title }}</p>\n            </a>\n          </div>\n          <section v-if=\"!movies.length\" class=\"not-found\">\n            <div class=\"not-found__content\">\n                <h2 class=\"not-found__title\" v-if=\"mode == 'search'\">Nothing Found</h2>\n                <h2 class=\"not-found__title\" v-if=\"mode == 'favorite'\">You haven't added any favorite movies</h2>\n            </div>\n          </section>\n      </div>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios';\n  import storage from '../../storage.js';\n\n  export default {\n    props: ['mode', 'category'],\n    beforeRouteLeave (to, from, next) {\n      if(from.name == 'search'){\n        eventHub.$emit('setSearchQuery', true);\n      }\n      next();\n    },\n    data(){\n      return {\n        movies: [],\n        listTitle: '',\n        pages: '',\n        results: '',\n        currentPage: 1,\n        listLoaded: false\n      }\n    },\n    computed: {\n      pageTitle(){\n        return this.listTitle + storage.pageTitlePostfix;\n      },\n      query(){\n        return this.$route.params.query || '';\n      },\n      request() {\n\n        if(this.mode == 'search') {\n          return `https://api.themoviedb.org/3/search/movie?api_key=${storage.apiKey}&language=en-US&query=${this.query}&page=1`;\n        } else if (this.mode == 'collection') {\n          let category = this.$route.params.category || this.category;\n          return `https://api.themoviedb.org/3/movie/${category}?api_key=${storage.apiKey}&language=en-US&page=1`;\n        } else if (this.mode == 'favorite') {\n            let ids = JSON.parse(localStorage.getItem('favorites'));\n            let favorites = [];\n\n            ids.forEach(function(id, key) {\n              axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${storage.apiKey}&language=en-US`)\n                .then(function(resp) {\n                  favorites.push(resp.data);\n                });\n            });\n            this.movies = favorites;\n        }\n\n      },\n      countResults(){\n        if(this.results > 1){\n          return numeral(this.results).format('0,0') + ' results';\n        } else {\n          return numeral(this.results).format('0,0') + ' result';\n        }\n      }\n    },\n    methods: {\n      openMoviePopup(id, event){\n        eventHub.$emit('openMoviePopup', id, event);\n      },\n      fetchCategory(){\n        axios.get(this.request)\n        .then(function(resp){\n            let data = resp.data;\n            this.movies = data.results;\n            this.pages = data.total_pages;\n            this.results = data.total_results;\n            this.listLoaded = true;\n            // Change Page title\n            document.title = this.pageTitle;\n        }.bind(this))\n        .catch(function(error) {\n          this.$router.push({ name: '404' });\n        }.bind(this));\n      },\n      loadMore(){\n        this.currentPage++;\n        axios.get(this.request)\n        .then(function(resp){\n            let data = resp.data;\n            let newData = this.movies.concat(data.results);\n            this.movies = newData;\n        }.bind(this));\n        },\n    },\n    watch: {\n      query(value){\n        this.fetchCategory(value);\n      },\n    },\n    created () {\n      if (this.mode == 'search'){\n        this.listTitle = storage.categories['search'];\n        eventHub.$emit('setSearchQuery');\n      } else if(this.mode == 'collection') {\n        let category = this.$route.params.category || this.category;\n        this.listTitle = storage.categories[category];\n      } else if(this.mode == 'favorite') {\n        this.listTitle = storage.categories['favorite'];\n      }\n      this.fetchCategory();\n    }\n  }\n</script>\n<style scoped>\n  #movie-list {\n    padding: 20px;\n    min-height: 900px;\n  }\n  .title {\n    text-align: center;\n  }\n  .movie-title {\n    margin: 0;\n    font-size: 12px;\n    letter-spacing: 0.8px;\n    transition: color 0.5s ease;\n  }\n  img {\n    transform: scale(0.97) translateZ(0);\n    transition: opacity 0.5s ease, transform 0.5s ease;\n  }\n  img:hover {\n    transform: scale(1.03);\n    box-shadow: 0 0 10px rgba(#081c24, 0.1);\n    cursor: pointer;\n  }\n  .movie-title:hover {\n    cursor: pointer;\n    color: #081c24;\n  }\n  .not-found__content {\n    text-align: center;\n  }\n</style>"],"sourceRoot":"src/views/moviesList"}]}