{"remainingRequest":"/Users/iasmina/Desktop/vue-movie-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/iasmina/Desktop/vue-movie-app/src/components/movieItem/movieItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/iasmina/Desktop/vue-movie-app/src/components/movieItem/movieItem.vue","mtime":1562785196903},{"path":"/Users/iasmina/Desktop/vue-movie-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/iasmina/Desktop/vue-movie-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iasmina/Desktop/vue-movie-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport storage from '../../storage';\n\nexport default {\n  props: ['id'],\n  data(){\n    return {\n      movie: {},\n      movieBackdropSrc: '',\n      favoriteChecked: false,\n    }\n  },\n  methods: {\n    //get movie\n    fetchMovie(id) {\n      axios.get(`/movie/${id}?api_key=${storage.apiKey}&language=en-US`)\n      .then(function(resp) {\n        this.movie = resp.data;\n\n        this.backdrop();\n        this.checkIfFavorite();\n\n        //open modal\n        if (storage.createMoviePopup){\n          storage.moviePath = '/movie/' + id;\n          history.pushState({ popup: true }, null, storage.moviePath);\n          storage.createMoviePopup = false;\n        }\n\n        //change page title to movie title\n        document.title = this.movie.title;\n      }.bind(this))\n      .catch(function(error) {\n        //show 404 page\n        this.$router.push({ name: '404' });\n      }.bind(this));\n    },\n    //set image backdrop\n    backdrop(){\n      if (this.movie.backdrop_path) {\n        this.movieBackdropSrc = 'http://image.tmdb.org/t/p/w500' + this.movie.backdrop_path;\n      }\n    },\n    //check if movie is added to favorites\n    checkIfFavorite() {\n      let favorites = JSON.parse(localStorage.getItem('favorites'));\n\n      if (favorites.find(fav => fav == this.movie.id)) {\n        this.favoriteChecked = true;\n      } else  {\n        this.favoriteChecked = false;\n      }\n    },\n    //favorite/unfavorite methods\n    setFavorite() {\n      let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      favorites.push(this.movie.id);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      this.favoriteChecked = true;\n    },\n    unsetFavorite() {\n      let favorites = JSON.parse(localStorage.getItem('favorites'));\n      for ( var i = 0; i < favorites.length; i++){ \n        if ( favorites[i] === this.movie.id) {\n          favorites.splice(i, 1); \n        }\n      }\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      this.favoriteChecked = false;\n    }\n  },\n  created () {\n    this.fetchMovie(this.id);\n  }\n}\n",{"version":3,"sources":["movieItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"movieItem.vue","sourceRoot":"src/components/movieItem","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <p class=\"image\">\n      <img :src=\"movieBackdropSrc\" alt=\"\">\n    </p>\n    <div class=\"tile is-parent\">\n      <article class=\"tile is-child\">\n        <div class=\"header\">\n          <p class=\"title movie-title\"> {{ movie.title }} </p>\n          <p class=\"title movie-rating\"> {{ movie.vote_average }} </p>\n        </div>\n        <p v-if=\"movie.tagline\" class=\"subtitle\">\n          <span class=\"uppercase\">{{ movie.tagline }}</span>\n        </p>\n\n        <div class=\"content\">\n\n          <div class=\"genre-subtitle uppercase\">\n            <span class=\"blue-color\">Genre: </span>\n            <span v-for=\"genre in movie.genres\"> {{ genre.name }} </span>\n          </div>\n\n          <p class=\"subtitle uppercase\">\n            <span class=\"blue-color\">Release date: </span>\n            <span>{{ movie.release_date | formatDate }}</span>\n          </p>\n\n          <div class=\"description\">\n            {{ movie.overview }}\n          </div>\n\n          <button\n            v-if=\"!favoriteChecked\"\n            class=\"button is-primary\"\n            v-on:click=\"setFavorite\"\n          >\n            Add to favorites\n          </button>\n          <button\n            v-if=\"favoriteChecked\"\n            class=\"button\"\n            v-on:click=\"unsetFavorite\"\n          >\n            Remove from favorites\n          </button>\n        </div>\n      </article>\n    </div>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios';\n  import storage from '../../storage';\n\n  export default {\n    props: ['id'],\n    data(){\n      return {\n        movie: {},\n        movieBackdropSrc: '',\n        favoriteChecked: false,\n      }\n    },\n    methods: {\n      //get movie\n      fetchMovie(id) {\n        axios.get(`/movie/${id}?api_key=${storage.apiKey}&language=en-US`)\n        .then(function(resp) {\n          this.movie = resp.data;\n\n          this.backdrop();\n          this.checkIfFavorite();\n\n          //open modal\n          if (storage.createMoviePopup){\n            storage.moviePath = '/movie/' + id;\n            history.pushState({ popup: true }, null, storage.moviePath);\n            storage.createMoviePopup = false;\n          }\n\n          //change page title to movie title\n          document.title = this.movie.title;\n        }.bind(this))\n        .catch(function(error) {\n          //show 404 page\n          this.$router.push({ name: '404' });\n        }.bind(this));\n      },\n      //set image backdrop\n      backdrop(){\n        if (this.movie.backdrop_path) {\n          this.movieBackdropSrc = 'http://image.tmdb.org/t/p/w500' + this.movie.backdrop_path;\n        }\n      },\n      //check if movie is added to favorites\n      checkIfFavorite() {\n        let favorites = JSON.parse(localStorage.getItem('favorites'));\n\n        if (favorites.find(fav => fav == this.movie.id)) {\n          this.favoriteChecked = true;\n        } else  {\n          this.favoriteChecked = false;\n        }\n      },\n      //favorite/unfavorite methods\n      setFavorite() {\n        let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n        favorites.push(this.movie.id);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n        this.favoriteChecked = true;\n      },\n      unsetFavorite() {\n        let favorites = JSON.parse(localStorage.getItem('favorites'));\n        for ( var i = 0; i < favorites.length; i++){ \n          if ( favorites[i] === this.movie.id) {\n            favorites.splice(i, 1); \n          }\n        }\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n        this.favoriteChecked = false;\n      }\n    },\n    created () {\n      this.fetchMovie(this.id);\n    }\n  }\n</script>\n\n<style scoped>\n  .tile {\n    padding: 20px;\n  }\n  .description {\n    margin-bottom: 20px;\n  }\n  .header {\n    display: flex;\n  }\n  .movie-title {\n    display: flex;\n    justify-content: flex-start;\n    width: 90%;\n  }\n  .movie-rating {\n    display: flex;\n    justify-content: flex-end;\n    color: #209cee;\n  }\n  .subtitle {\n    font-size: 12px;\n  }\n  .uppercase {\n    text-transform: uppercase;\n  }\n  .blue-color {\n    color: #209cee;\n  }\n  .genre-subtitle {\n    font-size: 12px;\n  }\n</style>\n"]}]}